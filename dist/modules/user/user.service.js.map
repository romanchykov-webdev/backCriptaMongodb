{"version":3,"file":"user.service.js","sourceRoot":"","sources":["../../../src/modules/user/user.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, BadRequestException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport { User, UserDocument } from \"./schemas/user.schema\";\nimport { CreateUserDTO, UpdateUserDTO, UpdatePasswordDTO } from \"./dto\";\nimport { AuthUserResponse } from \"../auth/response\";\nimport * as bcrypt from \"bcrypt\";\nimport { TokenService } from \"../token/token.service\";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model<UserDocument>,\n    private readonly tokenService: TokenService\n  ) {\n  }\n\n  async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, 10);\n  }\n\n  async findUserByEmail(email: string): Promise<UserDocument> {\n    return this.userModel.findOne({ email }).exec();\n  }\n\n  async findUserById(id: string): Promise<UserDocument> {\n    return this.userModel.findById(id).exec();\n  }\n\n  async createUser(dto: CreateUserDTO): Promise<UserDocument> {\n    const hashedPassword = await this.hashPassword(dto.password);\n    const newUser = new this.userModel({\n      ...dto,\n      password: hashedPassword\n    });\n    return newUser.save();\n  }\n\n  async publicUser(email: string): Promise<AuthUserResponse> {\n    const user = await this.userModel.findOne({ email }).select(\"-password\").exec();\n    const token = await this.tokenService.generationJwtToken({ id: user._id, email: user.email });\n    return { user, token };\n  }\n\n  async updateUser(userId: string, dto: UpdateUserDTO): Promise<UserDocument> {\n    return this.userModel.findByIdAndUpdate(userId, dto, { new: true }).exec();\n  }\n\n  async updatePassword(userId: string, dto: UpdatePasswordDTO): Promise<UserDocument> {\n    const user = await this.findUserById(userId);\n    const validatePassword = await bcrypt.compare(dto.oldPassword, user.password);\n    if (!validatePassword) {\n      throw new BadRequestException(\"Old password does not match.\");\n    }\n    const hashedPassword = await this.hashPassword(dto.newPassword);\n    return this.userModel.findByIdAndUpdate(userId, { password: hashedPassword }, { new: true }).exec();\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    await this.userModel.findByIdAndDelete(id).exec();\n    return true;\n  }\n}\n"]}