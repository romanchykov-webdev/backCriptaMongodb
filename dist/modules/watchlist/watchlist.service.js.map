{"version":3,"file":"watchlist.service.js","sourceRoot":"","sources":["../../../src/modules/watchlist/watchlist.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,+CAA+C;AAC/C,uCAAiC;AACjC,8DAAqD;AAK9C,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAC3B,YAEU,cAAwC;QAAxC,mBAAc,GAAd,cAAc,CAA0B;IAC/C,CAAC;IAEJ,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG;QACzB,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC;gBACvC,MAAM,EAAE,IAAI,CAAC,EAAE;gBACf,IAAI,EAAE,GAAG,CAAC,IAAI;gBACd,OAAO,EAAE,GAAG,CAAC,OAAO;aACrB,CAAC,CAAC;YACH,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEtB,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,MAAc;QAChC,IAAI,CAAC;YAEH,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QACnE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,MAAc,EAAE,OAAe;QAC/C,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc;iBACrC,SAAS,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;iBAC3C,IAAI,EAAE,CAAC;YACV,OAAO,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC;QACjC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;CACF,CAAA;AAxCY,4CAAgB;2BAAhB,gBAAgB;IAD5B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,sBAAW,EAAC,2BAAS,CAAC,IAAI,CAAC,CAAA;qCACJ,gBAAK;GAHpB,gBAAgB,CAwC5B","sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport { Watchlist } from \"./models/watchlist.model\";\nimport { WatchlistDocument } from \"./schemas/watchlist.schema\";\nimport { CreateAssetsResponse } from \"./response\";\n\n@Injectable()\nexport class WatchlistService {\n  constructor(\n    @InjectModel(Watchlist.name)\n    private watchlistModel: Model<WatchlistDocument>,\n  ) {}\n\n  async createAsset(user, dto): Promise<CreateAssetsResponse> {\n    try {\n      const newAsset = new this.watchlistModel({\n        userId: user.id,\n        name: dto.name,\n        assetId: dto.assetId,\n      });\n      await newAsset.save();\n      // @ts-ignore\n      return newAsset;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async getUserAssets(userId: string): Promise<Watchlist[]> {\n    try {\n      // @ts-ignore\n      return await this.watchlistModel.find({ userId: userId }).exec();\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async deleteAsset(userId: string, assetId: string): Promise<boolean> {\n    try {\n      const result = await this.watchlistModel\n        .deleteOne({ _id: assetId, userId: userId })\n        .exec();\n      return result.deletedCount > 0;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n}\n"]}