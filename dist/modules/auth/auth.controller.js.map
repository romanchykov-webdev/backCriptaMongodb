{"version":3,"file":"auth.controller.js","sourceRoot":"","sources":["../../../src/modules/auth/auth.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA6E;AAC7E,iDAA6C;AAC7C,qCAA4C;AAC5C,+BAAqC;AACrC,yCAA8C;AAC9C,6CAAuD;AACvD,uDAAmD;AACnD,sDAAsD;AAG/C,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YACmB,WAAwB,EACxB,WAAwB;QADxB,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;IACxC,CAAC;IAQJ,QAAQ,CAAS,GAAkB;QACjC,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IAC7C,CAAC;IAUD,KAAK,CAAS,GAAiB;QAC7B,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IACzC,CAAC;IAOD,iBAAiB,CAAQ,OAAO;QAC9B,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAC1B,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;CAGF,CAAA;AAvCY,wCAAc;AAYzB;IAJC,IAAA,iBAAO,EAAC,KAAK,CAAC;IACd,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAa,EAAE,CAAC;IAEjD,IAAA,aAAI,EAAC,UAAU,CAAC;IACP,WAAA,IAAA,aAAI,GAAE,CAAA;;qCAAM,mBAAa;;8CAElC;AAUD;IAJC,IAAA,iBAAO,EAAC,KAAK,CAAC;IACd,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,2BAAgB,EAAE,CAAC;IAEpD,IAAA,aAAI,EAAC,OAAO,CAAC;IACP,WAAA,IAAA,aAAI,GAAE,CAAA;;qCAAM,kBAAY;;2CAE9B;AAOD;IAFC,IAAA,kBAAS,EAAC,wBAAY,CAAC;IACvB,IAAA,YAAG,EAAC,sBAAsB,CAAC;IACT,WAAA,IAAA,YAAG,GAAE,CAAA;;;;uDAGvB;yBApCU,cAAc;IAD1B,IAAA,mBAAU,EAAC,MAAM,CAAC;qCAGe,0BAAW;QACX,0BAAW;GAHhC,cAAc,CAuC1B","sourcesContent":["import { Body, Controller, Get, Post, Req, UseGuards } from \"@nestjs/common\";\nimport { AuthService } from \"./auth.service\";\nimport { CreateUserDTO } from \"../user/dto\";\nimport { UserLoginDTO } from \"./dto\";\nimport { AuthUserResponse } from \"./response\";\nimport { ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { UserService } from \"../user/user.service\";\nimport { JwtAuthGuard } from \"../../guards/jwt-guard\";\n\n@Controller(\"auth\")\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n\n  //registration user\n  //to describer the documentation\n  @ApiTags(\"API\")\n  @ApiResponse({ status: 201, type: CreateUserDTO })\n  //to describer the documentation end--\n  @Post(\"register\")\n  register(@Body() dto: CreateUserDTO): Promise<AuthUserResponse> {\n    return this.authService.registerUsers(dto);\n  }\n\n  //registration user end-------------\n\n  //login user\n  //to describer the documentation\n  @ApiTags(\"API\")\n  @ApiResponse({ status: 200, type: AuthUserResponse })\n  //to describer the documentation end--\n  @Post(\"login\")\n  login(@Body() dto: UserLoginDTO): Promise<AuthUserResponse> {\n    return this.authService.loginUser(dto);\n  }\n\n  //login user end------------------\n\n  // get public user info\n  @UseGuards(JwtAuthGuard)\n  @Get(\"get-public-user-info\")\n  getPublicUserInfo(@Req() request) {\n    const user = request.user;\n    return this.userService.publicUser(user.email);\n  }\n\n  // get public user info end\n}\n"]}